{"name":"Hadoop-xz","tagline":"XZ Codec for Apache Hadoop","body":"Hadoop-XZ [![Build Status](https://travis-ci.org/yongtang/hadoop-xz.svg?branch=master)](https://travis-ci.org/yongtang/hadoop-xz)\r\n=========\r\n\r\n\r\nXZ (LZMA/LZMA2) Codec for Apache Hadoop\r\n--------------------------\r\n\r\nHadoop-XZ is a project to add the XZ compression codec in Hadoop.  XZ is a lossless data compression file format that incorporates the LZMA/LZMA2 compression algorithms.  XZ offers excellent compression ratio (LZMA/LZMA2) at the expense of longer compression time compared with other compression codecs such as gzip, lzo, or bzip2.  The decompression time of XZ is much more comparable with other compression codecs.  In fact, XZ have a much better decompression time than bzip2. It is an ideal compression format when longer compression time is tolerable.  The data can be divided into independently compressed blocks with the index of the blocks contained in the XZ file, which makes XZ a native splittable file format.\r\n\r\nThis library is built on top of the XZ Java library provided by http://tukaani.org (XZ Utils).  It supports the SplittableCompressionCodec interface so the individual XZ files could be processed with distributed tasks.  Keep in mind that XZ program tends to choose larger block size if no block size is specified (--block-size=size).  That often results in a single block within a huge compressed file.  This will not help distributed tasks.  It is always advised that an appropriate block size is specified when compression is performed.\r\n\r\n\r\nInstallation\r\n------------\r\nAdd the hadoop-xz POM to a project with\r\n```xml\r\n<dependency>\r\n  <groupId>io.sensesecure</groupId>\r\n  <artifactId>hadoop-xz</artifactId>\r\n  <version>1.4</version>\r\n</dependency>\r\n```\r\nOr add project's SBT with \r\n```scala\r\nlibraryDependencies += \"io.sensesecure\" % \"hadoop-xz\" % \"1.4\"\r\n```\r\n\r\n\r\nUsage\r\n-----\r\nIt is fairly simple to use XZ codec in Hadoop related programs.  For example, the following is an Apache Spark example of line count for an XZ compressed text file:\r\n\r\n```scala\r\nval sparkConf = new SparkConf().setAppName(\"Simple Application\")\r\nval sparkContext = new SparkContext(sparkConf)\r\nval configuration = new Configuration()\r\nconfiguration.set(\"io.compression.codecs\",\"io.sensesecure.hadoop.xz.XZCodec\")\r\nval rdd = sparkContext.newAPIHadoopFile(\"sample.text.xz\",\r\n            classOf[TextInputFormat], classOf[LongWritable], classOf[Text],\r\n            configuration)\r\n\r\nprintln(rdd.count())\r\n```\r\n\r\n\r\nContact\r\n-------\r\nIf you have trouble with the library or have questions, check out the GitHub repository at http://github.com/yongtang/hadoop-xz .\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}